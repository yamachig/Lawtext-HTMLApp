(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = peg$anyExpectation(),
      peg$c1 = function(text) { return text || ""; },
      peg$c2 = peg$otherExpectation("NOT_PARENTHESIS_CHAR"),
      peg$c3 = /^[^()\uFF08\uFF09[\]\uFF3B\uFF3D{}\uFF5B\uFF5D\u300C\u300D]/,
      peg$c4 = peg$classExpectation(["(", ")", "\uFF08", "\uFF09", "[", "]", "\uFF3B", "\uFF3D", "{", "}", "\uFF5B", "\uFF5D", "\u300C", "\u300D"], true, false),
      peg$c5 = peg$otherExpectation("TEXT"),
      peg$c6 = function(texts) {
              return replace_lawnum(texts.join(""));
          },
      peg$c7 = peg$otherExpectation("MISMATCH_START_PARENTHESIS"),
      peg$c8 = /^[(\uFF08[\uFF3B{\uFF5B\u300C]/,
      peg$c9 = peg$classExpectation(["(", "\uFF08", "[", "\uFF3B", "{", "\uFF5B", "\u300C"], false, false),
      peg$c10 = function(mismatch) {
              return `<span class="lawtext-analyzed lawtext-analyzed-mismatch-start-parenthesis">${mismatch}</span>`;
          },
      peg$c11 = peg$otherExpectation("MISMATCH_END_PARENTHESIS"),
      peg$c12 = /^[)\uFF09\]\uFF3D}\uFF5D\u300D]/,
      peg$c13 = peg$classExpectation([")", "\uFF09", "]", "\uFF3D", "}", "\uFF5D", "\u300D"], false, false),
      peg$c14 = function(mismatch) {
              return `<span class="lawtext-analyzed lawtext-analyzed-mismatch-end-parenthesis">${mismatch}</span>`;
          },
      peg$c15 = peg$otherExpectation("PARENTHESES_INLINE"),
      peg$c16 = "",
      peg$c17 = function() { depth++; return true; },
      peg$c18 = function(target) { depth--; return true; },
      peg$c19 = function(target) { return target; },
      peg$c20 = function() { depth--; return false; },
      peg$c21 = "DUMMY",
      peg$c22 = peg$literalExpectation("DUMMY", false),
      peg$c23 = peg$otherExpectation("PARENTHESES_INLINE_INNER"),
      peg$c24 = peg$otherExpectation("ROUND_PARENTHESES_INLINE"),
      peg$c25 = /^[(\uFF08]/,
      peg$c26 = peg$classExpectation(["(", "\uFF08"], false, false),
      peg$c27 = /^[)\uFF09]/,
      peg$c28 = peg$classExpectation([")", "\uFF09"], false, false),
      peg$c29 = function(start, target) { return target; },
      peg$c30 = function(start, texts) { return texts.join(""); },
      peg$c31 = function(start, content, end) {
              let type = "round";
              return `<span class="lawtext-analyzed lawtext-analyzed-parentheses" data-lawtext-parentheses-type="${type}" data-lawtext-parentheses-depth="${depth}"><span class="lawtext-analyzed lawtext-analyzed-start-parenthesis" data-lawtext-parentheses-type="${type}">${start}</span><span class="lawtext-analyzed lawtext-analyzed-parentheses-content" data-lawtext-parentheses-type="${type}">${content}</span><span class="lawtext-analyzed lawtext-analyzed-end-parenthesis" data-lawtext-parentheses-type="${type}">${end}</span></span>`;
          },
      peg$c32 = peg$otherExpectation("SQUARE_BRACKETS_INLINE"),
      peg$c33 = /^[[\uFF3B]/,
      peg$c34 = peg$classExpectation(["[", "\uFF3B"], false, false),
      peg$c35 = /^[\]\uFF3D]/,
      peg$c36 = peg$classExpectation(["]", "\uFF3D"], false, false),
      peg$c37 = function(start, content, end) {
              let type = "squareb";
              return `<span class="lawtext-analyzed lawtext-analyzed-parentheses" data-lawtext-parentheses-type="${type}" data-lawtext-parentheses-depth="${depth}"><span class="lawtext-analyzed lawtext-analyzed-start-parenthesis" data-lawtext-parentheses-type="${type}">${start}</span><span class="lawtext-analyzed lawtext-analyzed-parentheses-content" data-lawtext-parentheses-type="${type}">${content}</span><span class="lawtext-analyzed lawtext-analyzed-end-parenthesis" data-lawtext-parentheses-type="${type}">${end}</span></span>`;
          },
      peg$c38 = peg$otherExpectation("CURLY_BRACKETS_INLINE"),
      peg$c39 = /^[{\uFF5B]/,
      peg$c40 = peg$classExpectation(["{", "\uFF5B"], false, false),
      peg$c41 = /^[}\uFF5D]/,
      peg$c42 = peg$classExpectation(["}", "\uFF5D"], false, false),
      peg$c43 = function(start, content, end) {
              let type = "curly";
              return `<span class="lawtext-analyzed lawtext-analyzed-parentheses" data-lawtext-parentheses-type="${type}" data-lawtext-parentheses-depth="${depth}"><span class="lawtext-analyzed lawtext-analyzed-start-parenthesis" data-lawtext-parentheses-type="${type}">${start}</span><span class="lawtext-analyzed lawtext-analyzed-parentheses-content" data-lawtext-parentheses-type="${type}">${content}</span><span class="lawtext-analyzed lawtext-analyzed-end-parenthesis" data-lawtext-parentheses-type="${type}">${end}</span></span>`;
          },
      peg$c44 = peg$otherExpectation("SQUARE_PARENTHESES_INLINE"),
      peg$c45 = /^[\u300C]/,
      peg$c46 = peg$classExpectation(["\u300C"], false, false),
      peg$c47 = /^[^\u300D]/,
      peg$c48 = peg$classExpectation(["\u300D"], true, false),
      peg$c49 = /^[\u300D]/,
      peg$c50 = peg$classExpectation(["\u300D"], false, false),
      peg$c51 = function(start, content, end) {
              let type = "square";
              return `<span class="lawtext-analyzed lawtext-analyzed-parentheses" data-lawtext-parentheses-type="${type}" data-lawtext-parentheses-depth="${depth}"><span class="lawtext-analyzed lawtext-analyzed-start-parenthesis" data-lawtext-parentheses-type="${type}">${start}</span><span class="lawtext-analyzed lawtext-analyzed-parentheses-content" data-lawtext-parentheses-type="${type}">${content}</span><span class="lawtext-analyzed lawtext-analyzed-end-parenthesis" data-lawtext-parentheses-type="${type}">${end}</span></span>`;
          },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTEXT();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c0); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNOT_PARENTHESIS_CHAR() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c3.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }

    return s0;
  }

  function peg$parseTEXT() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = [];
    s4 = peg$parseNOT_PARENTHESIS_CHAR();
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseNOT_PARENTHESIS_CHAR();
      }
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s2 = input.substring(s2, peg$currPos);
    } else {
      s2 = s3;
    }
    if (s2 === peg$FAILED) {
      s2 = peg$parsePARENTHESES_INLINE();
      if (s2 === peg$FAILED) {
        s2 = peg$parseMISMATCH_END_PARENTHESIS();
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parseNOT_PARENTHESIS_CHAR();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseNOT_PARENTHESIS_CHAR();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parsePARENTHESES_INLINE();
          if (s2 === peg$FAILED) {
            s2 = peg$parseMISMATCH_END_PARENTHESIS();
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }

    return s0;
  }

  function peg$parseMISMATCH_START_PARENTHESIS() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c8.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c10(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c7); }
    }

    return s0;
  }

  function peg$parseMISMATCH_END_PARENTHESIS() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c12.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c13); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c14(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }

    return s0;
  }

  function peg$parsePARENTHESES_INLINE() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$currPos;
    s3 = peg$c16;
    if (s3 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s4 = peg$c17();
      if (s4) {
        s4 = void 0;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    peg$silentFails--;
    if (s2 !== peg$FAILED) {
      peg$currPos = s1;
      s1 = void 0;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePARENTHESES_INLINE_INNER();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$currPos;
        s5 = peg$c16;
        if (s5 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s6 = peg$c18(s2);
          if (s6) {
            s6 = void 0;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        peg$silentFails--;
        if (s4 !== peg$FAILED) {
          peg$currPos = s3;
          s3 = void 0;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      s3 = peg$c16;
      if (s3 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s4 = peg$c20();
        if (s4) {
          s4 = void 0;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      peg$silentFails--;
      if (s2 !== peg$FAILED) {
        peg$currPos = s1;
        s1 = void 0;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c21) {
          s2 = peg$c21;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c15); }
    }

    return s0;
  }

  function peg$parsePARENTHESES_INLINE_INNER() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseROUND_PARENTHESES_INLINE();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSQUARE_BRACKETS_INLINE();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCURLY_BRACKETS_INLINE();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSQUARE_PARENTHESES_INLINE();
          if (s0 === peg$FAILED) {
            s0 = peg$parseMISMATCH_START_PARENTHESIS();
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }

    return s0;
  }

  function peg$parseROUND_PARENTHESES_INLINE() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c25.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$currPos;
      s5 = [];
      s6 = peg$parseNOT_PARENTHESIS_CHAR();
      if (s6 !== peg$FAILED) {
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseNOT_PARENTHESIS_CHAR();
        }
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s4 = input.substring(s4, peg$currPos);
      } else {
        s4 = s5;
      }
      if (s4 === peg$FAILED) {
        s4 = peg$parsePARENTHESES_INLINE();
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          if (peg$c27.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = void 0;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseMISMATCH_END_PARENTHESIS();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c29(s1, s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parseNOT_PARENTHESIS_CHAR();
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseNOT_PARENTHESIS_CHAR();
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s4 = input.substring(s4, peg$currPos);
        } else {
          s4 = s5;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$parsePARENTHESES_INLINE();
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$currPos;
            peg$silentFails++;
            if (peg$c27.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c28); }
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = void 0;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseMISMATCH_END_PARENTHESIS();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c29(s1, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$c30(s1, s3);
      }
      s2 = s3;
      if (s2 !== peg$FAILED) {
        if (peg$c27.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c31(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c24); }
    }

    return s0;
  }

  function peg$parseSQUARE_BRACKETS_INLINE() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c33.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$currPos;
      s5 = [];
      s6 = peg$parseNOT_PARENTHESIS_CHAR();
      if (s6 !== peg$FAILED) {
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseNOT_PARENTHESIS_CHAR();
        }
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s4 = input.substring(s4, peg$currPos);
      } else {
        s4 = s5;
      }
      if (s4 === peg$FAILED) {
        s4 = peg$parsePARENTHESES_INLINE();
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          if (peg$c35.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = void 0;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseMISMATCH_END_PARENTHESIS();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c29(s1, s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parseNOT_PARENTHESIS_CHAR();
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseNOT_PARENTHESIS_CHAR();
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s4 = input.substring(s4, peg$currPos);
        } else {
          s4 = s5;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$parsePARENTHESES_INLINE();
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$currPos;
            peg$silentFails++;
            if (peg$c35.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = void 0;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseMISMATCH_END_PARENTHESIS();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c29(s1, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$c30(s1, s3);
      }
      s2 = s3;
      if (s2 !== peg$FAILED) {
        if (peg$c35.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c37(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }

    return s0;
  }

  function peg$parseCURLY_BRACKETS_INLINE() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c39.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$currPos;
      s5 = [];
      s6 = peg$parseNOT_PARENTHESIS_CHAR();
      if (s6 !== peg$FAILED) {
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseNOT_PARENTHESIS_CHAR();
        }
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s4 = input.substring(s4, peg$currPos);
      } else {
        s4 = s5;
      }
      if (s4 === peg$FAILED) {
        s4 = peg$parsePARENTHESES_INLINE();
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          if (peg$c41.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = void 0;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseMISMATCH_END_PARENTHESIS();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c29(s1, s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parseNOT_PARENTHESIS_CHAR();
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseNOT_PARENTHESIS_CHAR();
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s4 = input.substring(s4, peg$currPos);
        } else {
          s4 = s5;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$parsePARENTHESES_INLINE();
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$currPos;
            peg$silentFails++;
            if (peg$c41.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c42); }
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = void 0;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseMISMATCH_END_PARENTHESIS();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c29(s1, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$c30(s1, s3);
      }
      s2 = s3;
      if (s2 !== peg$FAILED) {
        if (peg$c41.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c43(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c38); }
    }

    return s0;
  }

  function peg$parseSQUARE_PARENTHESES_INLINE() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c45.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      if (peg$c47.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c47.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c48); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (peg$c49.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c51(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }

    return s0;
  }


      function replace_lawnum(text) {
          return text.replace(
              /(明治|大正|昭和|平成)([一二三四五六七八九十]+)年(\S+?)第([一二三四五六七八九十百千]+)号/g,
              (s) => {
                  return `<span class="lawtext-analyzed lawtext-analyzed-lawnum" data-lawnum="${s}">${s}</span>`;
              },
          );
      }

      let depth = 0;


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};

},{}],2:[function(require,module,exports){
(function (process){
"use strict";

var parser = require("./parser");
var annotate_html = require("./annotate_html");
var fs = require('fs');




function lex(text) {

    let lines = text.split(/\r?\n/);
    let lines_count = lines.length;
    let replaced_lines = [];
    let indent_depth = 0;
    let indent_memo = {};
    let re_indent = /^(?:  |　|\t)(?!- |-$|[ 　\t]*(?:第[一二三四五六七八九十百千]+[編章節款目章]|[附付]\s+則|別表))/;
    let re_force_dedent_parentheses = /^(?:  |　|\t)[(（][^)）]*[)）][ 　\t]*$/
    let re_indent_in_toc = /^(?:  |　|\t)/;
    let in_toc = false;

    for(let i = 0; i < lines.length; i++) {
        let line = lines[i];

        if(line.match(/^\s*$/)) {
            in_toc = false;
            replaced_lines.push(line);
            continue;
        }

        if(line.match(/^\S*目次$/)) {
            in_toc = true;
        }

        let force_dedent = false;
        if(line.match(re_force_dedent_parentheses)) {
            force_dedent = true;
        }

        let indents = [];
        let pos = 0;

        if(!force_dedent) {
            while(true) {
                let match = line.slice(pos).match(in_toc ? re_indent_in_toc : re_indent);
                if(!match) break;
                let indent = match[0];
                pos += indent.length;
                indents.push(indent);
            }
        }

        let replaced_line = ""
        if(indent_depth <= indents.length) {
            for(let j = indent_depth; j < indents.length; j++) {
                let indent = indents[j];
                replaced_line += `<INDENT str="${indent}">`;
            }
        } else {
            for(let j = 0; j < (indent_depth - indents.length); j++) {
                replaced_line += `<DEDENT>`;
            }
        }
        replaced_line += line.slice(pos);

        replaced_lines.push(replaced_line);

        indent_depth = indents.length;
        indent_memo[i + 1] = indent_depth
    }
    if(0 < indent_depth) {
        let replaced_line = ""
        for(let j = 0; j < indent_depth; j++) {
            replaced_line += `<DEDENT>`;
        }
        replaced_lines.push(replaced_line);
    }

    let replaced_text = replaced_lines.join("\n");

    return [replaced_text, indent_memo, lines_count];
}





function parse(text, options) {

    console.error("\\\\\\\\\\ parse start \\\\\\\\\\");
    let t0 = (new Date()).getTime();

    let [lexed, indent_memo, lines_count] = lex(text);
    // console.error(lexed);
    try {
        options = Object.assign({}, options, { indent_memo: indent_memo });
        var parsed = parser.parse(lexed, options);

        let t1 = (new Date()).getTime();
        console.error(`/////  parse end  /////`);
        console.error(`( ${Math.round((t1 - t0) / lines_count * 1000)} μs/line  =  ${t1 - t0} ms / ${lines_count} lines )`);
    } catch(e) {
        console.error("##### parse error #####");
        if(e.location) {
            console.error(`${e.name} at line ${e.location.start.line} column ${e.location.start.column}: ${e.message}`);
            // console.error(`${JSON.stringify(e, null, 4)}`);
        }
        throw(e);
    }
    return parsed;
}

function main(argv) {

    if(argv.length >= 3) {
        fs.readFile(argv[2], 'utf-8', function (err, data) {
            if (err) {
                throw err;
            }
            var parsed = parse(data);
            console.log(JSON.stringify(parsed));
        });

    } else {
        var input = '';
        process.stdin.resume();
        process.stdin.setEncoding('utf-8');
        process.stdin.on('data', function(chunk) {
            input += chunk;
        });
        process.stdin.on('end', function() {
            var parsed = parse(input);
            console.log(JSON.stringify(parsed));
        });
    }
}

if (typeof require !== 'undefined' && require.main === module) {
    main(process.argv)
}

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parse = parse;
    exports.annotate_html = annotate_html.parse;
}

if (typeof window !== 'undefined') {
    window.Lawtext = window.Lawtext || {};
    window.Lawtext.parse = parse;
    window.Lawtext.annotate_html = annotate_html.parse;
}

}).call(this,require('_process'))
},{"./annotate_html":1,"./parser":3,"_process":5,"fs":4}],3:[function(require,module,exports){
/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = peg$anyExpectation(),
      peg$c1 = function(law) {
              return law;
          },
      peg$c2 = function(law_title, target) { return target; },
      peg$c3 = function(law_title, enact_statements, toc, main_provision, appdx_items) {
              let law = new EL("Law", {Lang: "ja"});
              let law_body = new EL("LawBody");

              if(law_title !== null) {
                  if(law_title.law_num) {
                      law.append(new EL("LawNum", {}, [law_title.law_num]));

                      let m = law_title.law_num.match(/(明治|大正|昭和|平成)([一二三四五六七八九十]+)年(\S+?)第([一二三四五六七八九十百千]+)号/);
                      if(m) {
                          let [era, year, law_type, num] = m.slice(1);

                          let era_val = eras[era];
                          if(era_val) law.attr.Era = era_val;

                          let year_val = parse_kanji_num(year);
                          if(year_val !== null) law.attr.Year = year_val;

                          let law_type_val = get_lawtype(law_type);
                          if(law_type_val !== null) law.attr.LawType = law_type_val;

                          let num_val = parse_kanji_num(num);
                          if(num_val !== null) law.attr.Num = num_val;
                      }
                  }

                  if(law_title.law_title) {
                      law_body.append(new EL("LawTitle", {}, [law_title.law_title]));
                  }
              }

              law.append(law_body);

              law_body.extend(enact_statements || []);
              law_body.append(toc);
              law_body.append(main_provision);
              law_body.extend(appdx_items);

              return law;
          },
      peg$c4 = peg$otherExpectation("law_title"),
      peg$c5 = function(law_title, law_num) {
              return {
                  law_title: law_title,
                  law_num: law_num.content,
              }
          },
      peg$c6 = function(law_title) {
              return {
                  law_title: law_title,
              }
          },
      peg$c7 = peg$otherExpectation("enact_statement"),
      peg$c8 = function(target) {
              return new EL("EnactStatement", {}, [target]);
          },
      peg$c9 = peg$otherExpectation("toc_label"),
      peg$c10 = /^[^\r\n\u76EE]/,
      peg$c11 = peg$classExpectation(["\r", "\n", "\u76EE"], true, false),
      peg$c12 = "\u76EE\u6B21",
      peg$c13 = peg$literalExpectation("\u76EE\u6B21", false),
      peg$c14 = peg$otherExpectation("toc"),
      peg$c15 = function(toc_label, first, target) { return target; },
      peg$c16 = function(toc_label, first, rest) {
              let children = [first].concat(rest);

              let toc = new EL("TOC", {}, []);
              toc.append(new EL("TOCLabel", {}, [toc_label]));
              toc.extend(children);

              return toc;
          },
      peg$c17 = peg$otherExpectation("toc_item"),
      peg$c18 = function(title, article_range, first, target) { return target; },
      peg$c19 = function(title, article_range, first, rest) { return [first].concat(rest); },
      peg$c20 = function(title, article_range, children) {
              let type_char = title.match(/[編章節款目章則]/)[0];
              let toc_item = new EL("TOC" + article_group_type[type_char]);

              if(title.match(/[編章節款目章]/)) {
                  toc_item.attr.Delete = 'false';
                  let num = parse_named_num(title);
                  if(num) {
                      toc_item.attr.Num = num;
                  }
              }

              toc_item.append(new EL(
                  article_group_title_tag[type_char],
                  {},
                  [title],
              ));

              if(article_range !== null) {
                  toc_item.append(new EL(
                      "ArticleRange",
                      {},
                      [article_range],
                  ));
              }

              toc_item.extend(children || []);

              return toc_item;
          },
      peg$c21 = function(children) {
              return new EL("MainProvision", {}, children);
          },
      peg$c22 = function(paragraph) {
              return new EL("MainProvision", {}, [paragraph]);
          },
      peg$c23 = peg$otherExpectation("article_group_title"),
      peg$c24 = "\u7B2C",
      peg$c25 = peg$literalExpectation("\u7B2C", false),
      peg$c26 = /^[^ \u3000\t\r\n\u7DE8\u7AE0\u7BC0\u6B3E\u76EE]/,
      peg$c27 = peg$classExpectation([" ", "\u3000", "\t", "\r", "\n", "\u7DE8", "\u7AE0", "\u7BC0", "\u6B3E", "\u76EE"], true, false),
      peg$c28 = /^[\u7DE8\u7AE0\u7BC0\u6B3E\u76EE]/,
      peg$c29 = peg$classExpectation(["\u7DE8", "\u7AE0", "\u7BC0", "\u6B3E", "\u76EE"], false, false),
      peg$c30 = /^[\u306E\u30CE]/,
      peg$c31 = peg$classExpectation(["\u306E", "\u30CE"], false, false),
      peg$c32 = /^[^ \u3000\t\r\n]/,
      peg$c33 = peg$classExpectation([" ", "\u3000", "\t", "\r", "\n"], true, false),
      peg$c34 = function(type_char) {
                  return {
                      text: text(),
                      type_char: type_char,
                  };
              },
      peg$c35 = function(title) {
              return title;
          },
      peg$c36 = peg$otherExpectation("article_group"),
      peg$c37 = function(article_group_title, next_title) {
                      let current_level = article_group_type_chars.indexOf(article_group_title.type_char);
                      let next_level = article_group_type_chars.indexOf(next_title.type_char);
                      return current_level < next_level;
                  },
      peg$c38 = function(article_group_title, article_group) {
                      return article_group;
                  },
      peg$c39 = function(article_group_title, children) {
              let article_group = new EL(
                  article_group_type[article_group_title.type_char],
                  {Delete: "false", Hide: "false"},
              );

              article_group.append(new EL(
                  article_group_type[article_group_title.type_char] + "Title",
                  {},
                  [article_group_title.text],
              ))

              let num = parse_named_num(article_group_title.text);
              if(num) {
                  article_group.attr.Num = num;
              }

              article_group.extend(children);

              return article_group;
          },
      peg$c40 = peg$otherExpectation("article_paragraph_caption"),
      peg$c41 = function(article_paragraph_caption) {
              return article_paragraph_caption;
          },
      peg$c42 = peg$otherExpectation("article_title"),
      peg$c43 = /^[^ \u3000\t\r\n\u6761]/,
      peg$c44 = peg$classExpectation([" ", "\u3000", "\t", "\r", "\n", "\u6761"], true, false),
      peg$c45 = "\u6761",
      peg$c46 = peg$literalExpectation("\u6761", false),
      peg$c47 = peg$otherExpectation("article"),
      peg$c48 = function(article_caption, article_title, target) { return target; },
      peg$c49 = function(article_caption, article_title) { return [new EL("Sentence", {WritingMode: 'vertical'})]; },
      peg$c50 = function(article_caption, article_title, inline_contents, target) { return target; },
      peg$c51 = function(article_caption, article_title, inline_contents, lists, target, _target) { return _target; },
      peg$c52 = function(article_caption, article_title, inline_contents, lists, target, target_rest) { return [target].concat(target_rest); },
      peg$c53 = function(article_caption, article_title, inline_contents, lists, children1, paragraphs, target, _target) { return _target; },
      peg$c54 = function(article_caption, article_title, inline_contents, lists, children1, paragraphs, target, target_rest) { return [target].concat(target_rest); },
      peg$c55 = function(article_caption, article_title, inline_contents, lists, children1, paragraphs, children2) {
              let article = new EL(
                  "Article",
                  {Delete: "false", Hide: "false"},
              );
              if(article_caption !== null) {
                  article.append(new EL("ArticleCaption", {}, [article_caption]));
              }
              article.append(new EL("ArticleTitle", {}, [article_title]));

              let num = parse_named_num(article_title);
              if(num) {
                  article.attr.Num = num;
              }

              let paragraph = new EL("Paragraph");
              paragraph.attr.OldStyle = "false";
              paragraph.attr.Delete = "false";
              article.append(paragraph);

              paragraph.append(new EL("ParagraphNum"));
              paragraph.append(new EL("ParagraphSentence", {}, inline_contents));
              paragraph.extend(lists || []);
              paragraph.extend(children1 || []);
              paragraph.extend(children2 || []);

              article.extend(paragraphs);

              return article;
          },
      peg$c56 = peg$otherExpectation("paragraph_item"),
      peg$c57 = /^[^ \u3000\t\r\n\u6761<]/,
      peg$c58 = peg$classExpectation([" ", "\u3000", "\t", "\r", "\n", "\u6761", "<"], true, false),
      peg$c59 = function(paragraph_caption, paragraph_item_title, inline_contents, target) { return target; },
      peg$c60 = function(paragraph_caption, paragraph_item_title, inline_contents, lists, target, _target) { return _target; },
      peg$c61 = function(paragraph_caption, paragraph_item_title, inline_contents, lists, target, target_rest) { return [target].concat(target_rest); },
      peg$c62 = function(paragraph_caption, paragraph_item_title, inline_contents, lists, children) {
              let lineno = location().start.line;
              let indent = indent_memo[lineno];

              if(base_indent_stack.length > 0) {
                  let [base_indent, is_first, base_lineno] = base_indent_stack[base_indent_stack.length - 1];
                  if(!is_first || lineno !== base_lineno) {
                      indent -= base_indent;
                  }
              }

              let paragraph_item = new EL(
                  paragraph_item_tags[indent],
                  {Hide: "false"},
              );
              if(indent === 0) {
                  paragraph_item.attr.OldStyle = "false";
              } else {
                  paragraph_item.attr.Delete = "false";
              }
              if(paragraph_caption !== null) {
                  paragraph_item.append(new EL("ParagraphCaption", {}, [paragraph_caption]));
              }

              paragraph_item.append(new EL(paragraph_item_title_tags[indent], {}, [paragraph_item_title]));

              let num = parse_named_num(paragraph_item_title);
              if(num) {
                  paragraph_item.attr.Num = num;
              }

              paragraph_item.append(new EL(paragraph_item_sentence_tags[indent], {}, inline_contents));

              paragraph_item.extend(lists || []);
              paragraph_item.extend(children || []);

              return paragraph_item;
          },
      peg$c63 = peg$otherExpectation("no_name_paragraph_item"),
      peg$c64 = function(inline_contents, target) { return target; },
      peg$c65 = function(inline_contents, lists, target, _target) { return _target; },
      peg$c66 = function(inline_contents, lists, target, target_rest) { return [target].concat(target_rest); },
      peg$c67 = function(inline_contents, lists, children) {
              let lineno = location().start.line;
              let indent = indent_memo[lineno];

              if(base_indent_stack.length > 0) {
                  let [base_indent, is_first, base_lineno] = base_indent_stack[base_indent_stack.length - 1];
                  if(!is_first || lineno !== base_lineno) {
                      indent -= base_indent;
                  }
              }

              let paragraph_item = new EL(
                  paragraph_item_tags[indent],
                  {Hide: "false", Num: "1"},
              );
              if(indent === 0) {
                  paragraph_item.attr.OldStyle = "false";
              } else {
                  paragraph_item.attr.Delete = "false";
              }
              paragraph_item.append(new EL(paragraph_item_title_tags[indent]));
              paragraph_item.append(new EL(paragraph_item_sentence_tags[indent], {}, inline_contents));
              paragraph_item.extend(lists || []);
              paragraph_item.extend(children || []);

              return paragraph_item;
          },
      peg$c68 = peg$otherExpectation("paragraph_item_child"),
      peg$c69 = peg$otherExpectation("list"),
      peg$c70 = "",
      peg$c71 = function(columns_or_sentences) { list_depth++; return true; },
      peg$c72 = function(columns_or_sentences, target) { list_depth--; return true; },
      peg$c73 = function(columns_or_sentences, target) { return target; },
      peg$c74 = function(columns_or_sentences) { list_depth--; return false; },
      peg$c75 = "DUMMY",
      peg$c76 = peg$literalExpectation("DUMMY", false),
      peg$c77 = function(columns_or_sentences, sublists) {
              let list = new EL(list_tags[list_depth]);
              let list_sentence = new EL(list_tags[list_depth] + "Sentence");
              list.append(list_sentence);

              list_sentence.extend(columns_or_sentences);

              list.extend(sublists || []);

              return list;
          },
      peg$c78 = peg$otherExpectation("table_struct"),
      peg$c79 = function(table_struct_title, remarkses1, table, remarkses2) {
              let table_struct = new EL("TableStruct");

              if(table_struct_title !== null) {
                  table_struct.append(table_struct_title);
              }

              table_struct.extend(remarkses1);

              table_struct.append(table);

              table_struct.extend(remarkses2);

              return table_struct;
          },
      peg$c80 = peg$otherExpectation("table_struct_title"),
      peg$c81 = ":table-struct-title:",
      peg$c82 = peg$literalExpectation(":table-struct-title:", false),
      peg$c83 = function(title) {
              return new EL("TableStructTitle", {}, [title]);
          },
      peg$c84 = peg$otherExpectation("table"),
      peg$c85 = "*",
      peg$c86 = peg$literalExpectation("*", false),
      peg$c87 = "  ",
      peg$c88 = peg$literalExpectation("  ", false),
      peg$c89 = "\u3000",
      peg$c90 = peg$literalExpectation("\u3000", false),
      peg$c91 = "\t",
      peg$c92 = peg$literalExpectation("\t", false),
      peg$c93 = function(first, target) {return target;},
      peg$c94 = function(first, rest) {return [first].concat(rest);},
      peg$c95 = function(table_row_columns) {
              let table = new EL("Table", {WritingMode: "vertical"});
              for(let i = 0; i < table_row_columns.length; i++) {
                  let table_row = new EL("TableRow", {}, table_row_columns[i]);
                  table.append(table_row);
              }

              return table;
          },
      peg$c96 = peg$otherExpectation("table_column"),
      peg$c97 = "-",
      peg$c98 = peg$literalExpectation("-", false),
      peg$c99 = "[",
      peg$c100 = peg$literalExpectation("[", false),
      peg$c101 = /^[^ \u3000\t\r\n\]=]/,
      peg$c102 = peg$classExpectation([" ", "\u3000", "\t", "\r", "\n", "]", "="], true, false),
      peg$c103 = "=\"",
      peg$c104 = peg$literalExpectation("=\"", false),
      peg$c105 = /^[^ \u3000\t\r\n\]"]/,
      peg$c106 = peg$classExpectation([" ", "\u3000", "\t", "\r", "\n", "]", "\""], true, false),
      peg$c107 = "\"]",
      peg$c108 = peg$literalExpectation("\"]", false),
      peg$c109 = function(name, value) { return [name, value]; },
      peg$c110 = function(attr, inline) {
                  return new EL(
                      "Sentence",
                      {WritingMode: "vertical"},
                      [inline || ""],
                  )
              },
      peg$c111 = function(attr, first, inline) {
                              return new EL(
                                  "Sentence",
                                  {WritingMode: "vertical"},
                                  [inline],
                              )
                          },
      peg$c112 = function(attr, first, _target) { return _target; },
      peg$c113 = function(attr, first, target) { return target; },
      peg$c114 = function(attr, first, rest) {
              let children = [first].concat(rest || []);

              let table_column = new EL("TableColumn");
              for(let i = 0; i < attr.length; i++) {
                  let [name, value] = attr[i];
                  table_column.attr[name] = value
              }

              table_column.extend(children);

              return table_column;
          },
      peg$c115 = function(here) { console.error(`tc 10 line ${location().start.line}: "${here}"`); return true; },
      peg$c116 = function() {
              return new EL(
                  "TableColumn",
                  {
                      BorderTop: "solid",
                      BorderRight: "solid",
                      BorderBottom: "solid",
                      BorderLeft: "solid",
                  },
                  [new EL("Sentence", {WritingMode: "vertical"}),
              ]);
          },
      peg$c117 = peg$otherExpectation("style_struct"),
      peg$c118 = function(style_struct_title, remarkses1, style, remarkses2) {
              let style_struct = new EL("StyleStruct");

              if(style_struct_title !== null) {
                  style_struct.append(style_struct_title);
              }

              style_struct.extend(remarkses1);

              style_struct.append(style);

              style_struct.extend(remarkses2);

              return style_struct;
          },
      peg$c119 = peg$otherExpectation("style_struct_title"),
      peg$c120 = ":style-struct-title:",
      peg$c121 = peg$literalExpectation(":style-struct-title:", false),
      peg$c122 = function(title) {
              return new EL("StyleStructTitle", {}, [title]);
          },
      peg$c123 = peg$otherExpectation("style"),
      peg$c124 = function(table) { return [table]; },
      peg$c125 = function(fig) { return [fig]; },
      peg$c126 = function(target) { return target; },
      peg$c127 = function(children) {
              return new EL("Style", {}, children);
          },
      peg$c128 = peg$otherExpectation("remarks"),
      peg$c129 = "\u5099\u8003",
      peg$c130 = peg$literalExpectation("\u5099\u8003", false),
      peg$c131 = "\u6CE8",
      peg$c132 = peg$literalExpectation("\u6CE8", false),
      peg$c133 = function(label, _target) {
                  return new EL(
                      "Sentence",
                      {WritingMode: "vertical"},
                      [_target],
                  );
              },
      peg$c134 = function(label, first) { base_indent_stack.push([indent_memo[location().start.line] - 1, false, location().start.line]); return true; },
      peg$c135 = function(label, first, _target) { base_indent_stack.pop(); return true; },
      peg$c136 = function(label, first, _target) { return _target; },
      peg$c137 = function(label, first) { base_indent_stack.pop(); return false; },
      peg$c138 = function(label, first, _target) {
                          return new EL(
                              "Sentence",
                              {WritingMode: "vertical"},
                              [_target],
                              );
                          },
      peg$c139 = function(label, first, target) { return target; },
      peg$c140 = function(label, first, rest) {
              let children = rest || [];
              if(first !== null) {
                  children = [].concat(first).concat(children);
              }
              if(children.length >= 2) {
                  for(let i = 0; i < children.length; i++) {
                      let child = children[i];
                      if(child.tag.match(/Sentence|Column/)) {
                          child.attr.Num = "" + (i + 1);
                      }
                  }
              }

              let remarks = new EL("Remarks");
              remarks.append(new EL("RemarksLabel", {}, [label]));
              remarks.extend(children);

              return remarks;
          },
      peg$c141 = peg$otherExpectation("fig_struct"),
      peg$c142 = function(fig) {
              return new EL("FigStruct", {}, [fig]);
          },
      peg$c143 = peg$otherExpectation("fig"),
      peg$c144 = "..",
      peg$c145 = peg$literalExpectation("..", false),
      peg$c146 = "figure",
      peg$c147 = peg$literalExpectation("figure", false),
      peg$c148 = "::",
      peg$c149 = peg$literalExpectation("::", false),
      peg$c150 = function(src) {
              return new EL("Fig", {src: src});
          },
      peg$c151 = peg$otherExpectation("appdx_item"),
      peg$c152 = peg$otherExpectation("appdx_table_title"),
      peg$c153 = "\u5225\u8868",
      peg$c154 = peg$literalExpectation("\u5225\u8868", false),
      peg$c155 = /^[^\r\n(\uFF08]/,
      peg$c156 = peg$classExpectation(["\r", "\n", "(", "\uFF08"], true, false),
      peg$c157 = function(title, target) { return target.text; },
      peg$c158 = function(title, related_article_num, table_struct_title) {
                  return {
                      text: text(),
                      title: title,
                      related_article_num: related_article_num,
                      table_struct_title: table_struct_title,
                  };
              },
      peg$c159 = function(title_struct) {
              return title_struct;
          },
      peg$c160 = peg$otherExpectation("appdx_table"),
      peg$c161 = function(title_struct, target, remarkses) { return target.concat(remarkses); },
      peg$c162 = function(title_struct, children) {
              let appdx_table = new EL("AppdxTable");
              if(title_struct.table_struct_title !== "") {
                  console.error(`### line ${location().start.line}: Maybe irregular AppdxTableTitle!`);
                  appdx_table.append(new EL("AppdxTableTitle", {WritingMode: "vertical"}, [title_struct.text]));
              } else {
                  appdx_table.append(new EL("AppdxTableTitle", {WritingMode: "vertical"}, [title_struct.title]));
                  if(title_struct.related_article_num) {
                      appdx_table.append(new EL("RelatedArticleNum", {}, [title_struct.related_article_num]));
                  }
              }
              appdx_table.extend(children || []);

              return appdx_table;
          },
      peg$c163 = peg$otherExpectation("appdx_table_children"),
      peg$c164 = function(table_struct) { return [table_struct]; },
      peg$c165 = peg$otherExpectation("appdx_style_title"),
      peg$c166 = "\u69D8\u5F0F",
      peg$c167 = peg$literalExpectation("\u69D8\u5F0F", false),
      peg$c168 = function(title, related_article_num, style_struct_title) {
                  return {
                      text: text(),
                      title: title,
                      related_article_num: related_article_num,
                      style_struct_title: style_struct_title,
                  };
              },
      peg$c169 = peg$otherExpectation("appdx_style"),
      peg$c170 = function(title_struct, first, _target) {return _target;},
      peg$c171 = function(title_struct, first, rest) { return [first].concat(rest); },
      peg$c172 = function(title_struct, target) { return target; },
      peg$c173 = function(title_struct, children) {
              let appdx_style = new EL("AppdxStyle");
              appdx_style.append(new EL("AppdxStyleTitle", {}, [title_struct.title]));
              if(title_struct.related_article_num) {
                  appdx_style.append(new EL("RelatedArticleNum", {}, [title_struct.related_article_num]));
              }
              appdx_style.extend(children || []);

              return appdx_style;
          },
      peg$c174 = peg$otherExpectation("appdx_style_children"),
      peg$c175 = peg$otherExpectation("suppl_provision_label"),
      peg$c176 = /^[\u9644\u4ED8]/,
      peg$c177 = peg$classExpectation(["\u9644", "\u4ED8"], false, false),
      peg$c178 = "\u5247",
      peg$c179 = peg$literalExpectation("\u5247", false),
      peg$c180 = function(label, target) { return target.content; },
      peg$c181 = "\u6284",
      peg$c182 = peg$literalExpectation("\u6284", false),
      peg$c183 = function(label, amend_law_num, extract) {
              return {
                  label: label,
                  amend_law_num: amend_law_num,
                  extract: extract,
              }
          },
      peg$c184 = peg$otherExpectation("suppl_provision"),
      peg$c185 = function(suppl_provision_label, first, rest) { return [first].concat(rest); },
      peg$c186 = function(suppl_provision_label, children) {
              let suppl_provision = new EL("SupplProvision");
              if(suppl_provision_label.amend_law_num) {
                  suppl_provision.attr["AmendLawNum"] = suppl_provision_label.amend_law_num;
              }
              if(suppl_provision_label.extract !== null) {
                  suppl_provision.attr["Extract"] = "true";
              }
              suppl_provision.append(new EL("SupplProvisionLabel", {}, [suppl_provision_label.label]))
              suppl_provision.extend(children);
              return suppl_provision;
          },
      peg$c187 = peg$otherExpectation("columns_or_sentences"),
      peg$c188 = function(inline) {
              console.error(`### line ${location().start.line}: Maybe mismatched parenthesis!`);
              let sentence = new EL(
                  "Sentence",
                  {WritingMode: "vertical"},
                  [inline],
              );
              return [sentence];
          },
      peg$c189 = peg$otherExpectation("period_sentences"),
      peg$c190 = function(fragments) {
              let sentences = [];
              let proviso_indices = [];
              for(let i = 0; i < fragments.length; i++) {
                  let sentence_str = fragments[i];
                  let sentence = new EL(
                      "Sentence",
                      {WritingMode: "vertical"},
                      [sentence_str]
                  );
                  if(fragments.length >= 2) sentence.attr.Num = "" + (i + 1);
                  if(sentence_str.match(/^ただし、|但し、/)) {
                      proviso_indices.push(i);
                  }
                  sentences.push(sentence);
              }
              if(proviso_indices.length > 0) {
                  for(let i = 0; i < sentences.length; i++) {
                      sentences[i].attr.Function =
                          proviso_indices.indexOf(i) >= 0 ?
                              'proviso' : 'main';
                  }
              }
              return sentences;
          },
      peg$c191 = peg$otherExpectation("columns"),
      peg$c192 = function(first, target) { return target; },
      peg$c193 = function(first, rest) {
              let column_inner_sets = [first].concat(rest);
              let columns = [];
              for(let i = 0; i < column_inner_sets.length; i++) {
                  let column = new EL(
                      "Column",
                      {},
                      column_inner_sets[i],
                  );
                  if(column_inner_sets.length >= 2) {
                      column.attr.Num = "" + (i + 1);
                  }
                  columns.push(column);
              }
              return columns;
          },
      peg$c194 = peg$otherExpectation("INLINE"),
      peg$c195 = /^[^\r\n]/,
      peg$c196 = peg$classExpectation(["\r", "\n"], true, false),
      peg$c197 = peg$otherExpectation("NEXTINLINE"),
      peg$c198 = /^[\r\n]/,
      peg$c199 = peg$classExpectation(["\r", "\n"], false, false),
      peg$c200 = function(inline) {
              return {
                  text: text(),
                  inline: inline,
              }
          },
      peg$c201 = peg$otherExpectation("NOT_PARENTHESIS_CHAR"),
      peg$c202 = /^[^\r\n()\uFF08\uFF09[\]\uFF3B\uFF3D{}\uFF5B\uFF5D\u300C\u300D]/,
      peg$c203 = peg$classExpectation(["\r", "\n", "(", ")", "\uFF08", "\uFF09", "[", "]", "\uFF3B", "\uFF3D", "{", "}", "\uFF5B", "\uFF5D", "\u300C", "\u300D"], true, false),
      peg$c204 = peg$otherExpectation("INLINE_FRAGMENT"),
      peg$c205 = /^[^\r\n()\uFF08\uFF09[\]\uFF3B\uFF3D{}\uFF5B\uFF5D\u300C\u300D \u3000\t]/,
      peg$c206 = peg$classExpectation(["\r", "\n", "(", ")", "\uFF08", "\uFF09", "[", "]", "\uFF3B", "\uFF3D", "{", "}", "\uFF5B", "\uFF5D", "\u300C", "\u300D", " ", "\u3000", "\t"], true, false),
      peg$c207 = peg$otherExpectation("PERIOD_SENTENCE_FRAGMENT"),
      peg$c208 = "<QuoteStruct>",
      peg$c209 = peg$literalExpectation("<QuoteStruct>", false),
      peg$c210 = /^[^\r\n()\uFF08\uFF09[\]\uFF3B\uFF3D{}\uFF5B\uFF5D\u300C\u300D \u3000\t\u3002]/,
      peg$c211 = peg$classExpectation(["\r", "\n", "(", ")", "\uFF08", "\uFF09", "[", "]", "\uFF3B", "\uFF3D", "{", "}", "\uFF5B", "\uFF5D", "\u300C", "\u300D", " ", "\u3000", "\t", "\u3002"], true, false),
      peg$c212 = "\u3002",
      peg$c213 = peg$literalExpectation("\u3002", false),
      peg$c214 = peg$otherExpectation("OUTSIDE_PARENTHESES_INLINE"),
      peg$c215 = peg$otherExpectation("PARENTHESES_INLINE"),
      peg$c216 = peg$otherExpectation("ROUND_PARENTHESES_INLINE"),
      peg$c217 = /^[(\uFF08]/,
      peg$c218 = peg$classExpectation(["(", "\uFF08"], false, false),
      peg$c219 = /^[)\uFF09]/,
      peg$c220 = peg$classExpectation([")", "\uFF09"], false, false),
      peg$c221 = function(start, content, end) {
              return {
                  text: text(),
                  content: content,
              }
          },
      peg$c222 = peg$otherExpectation("SQUARE_BRACKETS_INLINE"),
      peg$c223 = /^[[\uFF3B]/,
      peg$c224 = peg$classExpectation(["[", "\uFF3B"], false, false),
      peg$c225 = /^[\]\uFF3D]/,
      peg$c226 = peg$classExpectation(["]", "\uFF3D"], false, false),
      peg$c227 = peg$otherExpectation("CURLY_BRACKETS_INLINE"),
      peg$c228 = /^[{\uFF5B]/,
      peg$c229 = peg$classExpectation(["{", "\uFF5B"], false, false),
      peg$c230 = /^[}\uFF5D]/,
      peg$c231 = peg$classExpectation(["}", "\uFF5D"], false, false),
      peg$c232 = peg$otherExpectation("SQUARE_PARENTHESES_INLINE"),
      peg$c233 = /^[\u300C]/,
      peg$c234 = peg$classExpectation(["\u300C"], false, false),
      peg$c235 = /^[^\r\n\u300C\u300D]/,
      peg$c236 = peg$classExpectation(["\r", "\n", "\u300C", "\u300D"], true, false),
      peg$c237 = /^[\u300D]/,
      peg$c238 = peg$classExpectation(["\u300D"], false, false),
      peg$c239 = peg$otherExpectation("quote_struct"),
      peg$c240 = "</QuoteStruct>",
      peg$c241 = peg$literalExpectation("</QuoteStruct>", false),
      peg$c242 = peg$otherExpectation("INDENT"),
      peg$c243 = "<INDENT str=\"",
      peg$c244 = peg$literalExpectation("<INDENT str=\"", false),
      peg$c245 = /^[^"]/,
      peg$c246 = peg$classExpectation(["\""], true, false),
      peg$c247 = "\">",
      peg$c248 = peg$literalExpectation("\">", false),
      peg$c249 = function(str) {
              return str;
          },
      peg$c250 = peg$otherExpectation("DEDENT"),
      peg$c251 = "<DEDENT>",
      peg$c252 = peg$literalExpectation("<DEDENT>", false),
      peg$c253 = /^[ \u3000\t]/,
      peg$c254 = peg$classExpectation([" ", "\u3000", "\t"], false, false),
      peg$c255 = peg$otherExpectation("WHITESPACES"),
      peg$c256 = peg$otherExpectation("NEWLINE"),
      peg$c257 = /^[\r]/,
      peg$c258 = peg$classExpectation(["\r"], false, false),
      peg$c259 = /^[\n]/,
      peg$c260 = peg$classExpectation(["\n"], false, false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseNEWLINE();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseNEWLINE();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselaw();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c0); }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c1(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselaw() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parselaw_title();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseINDENT();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseINDENT();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseenact_statement();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseenact_statement();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseDEDENT();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseDEDENT();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c2(s1, s5);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetoc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsemain_provision();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseappdx_item();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseappdx_item();
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c3(s1, s2, s3, s4, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselaw_title() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseINLINE();
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNEWLINE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePARENTHESES_INLINE();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseNEWLINE();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseNEWLINE();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c5(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseINLINE();
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseNEWLINE();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseNEWLINE();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c6(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }

    return s0;
  }

  function peg$parseenact_statement() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parse__();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsetoc_label();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsearticle_title();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseINLINE();
          if (s5 !== peg$FAILED) {
            s4 = input.substring(s4, peg$currPos);
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseNEWLINE();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseNEWLINE();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c8(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c7); }
    }

    return s0;
  }

  function peg$parsetoc_label() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseINDENT();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseDEDENT();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseNEWLINE();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          if (peg$c10.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c11); }
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c10.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
          }
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c12) {
              s6 = peg$c12;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c13); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            peg$silentFails++;
            s6 = peg$parseNEWLINE();
            peg$silentFails--;
            if (s6 !== peg$FAILED) {
              peg$currPos = s5;
              s5 = void 0;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }

    return s0;
  }

  function peg$parsetoc() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsetoc_label();
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNEWLINE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseINDENT();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetoc_item();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parsetoc_item();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s6;
              s7 = peg$c15(s1, s4, s7);
            }
            s6 = s7;
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parsetoc_item();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c15(s1, s4, s7);
              }
              s6 = s7;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseNEWLINE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseNEWLINE();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseDEDENT();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c16(s1, s4, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c14); }
    }

    return s0;
  }

  function peg$parsetoc_item() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseINDENT();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseDEDENT();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseNEWLINE();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseOUTSIDE_PARENTHESES_INLINE();
          if (s5 !== peg$FAILED) {
            s4 = input.substring(s4, peg$currPos);
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseROUND_PARENTHESES_INLINE();
            if (s6 !== peg$FAILED) {
              s5 = input.substring(s5, peg$currPos);
            } else {
              s5 = s6;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseNEWLINE();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseINDENT();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetoc_item();
                  if (s9 !== peg$FAILED) {
                    s10 = [];
                    s11 = peg$currPos;
                    s12 = peg$parsetoc_item();
                    if (s12 !== peg$FAILED) {
                      peg$savedPos = s11;
                      s12 = peg$c18(s4, s5, s9, s12);
                    }
                    s11 = s12;
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$currPos;
                      s12 = peg$parsetoc_item();
                      if (s12 !== peg$FAILED) {
                        peg$savedPos = s11;
                        s12 = peg$c18(s4, s5, s9, s12);
                      }
                      s11 = s12;
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = [];
                      s12 = peg$parseNEWLINE();
                      while (s12 !== peg$FAILED) {
                        s11.push(s12);
                        s12 = peg$parseNEWLINE();
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseDEDENT();
                        if (s12 !== peg$FAILED) {
                          peg$savedPos = s7;
                          s8 = peg$c19(s4, s5, s9, s10);
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c20(s4, s5, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }

    return s0;
  }

  function peg$parsemain_provision() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsearticle();
    if (s2 === peg$FAILED) {
      s2 = peg$parsearticle_group();
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsearticle();
        if (s2 === peg$FAILED) {
          s2 = peg$parsearticle_group();
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c21(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseno_name_paragraph_item();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c22(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsearticle_group_title() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 31532) {
        s3 = peg$c24;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        if (peg$c26.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c26.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (peg$c28.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (peg$c30.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }
            if (s7 !== peg$FAILED) {
              s8 = [];
              if (peg$c32.test(input.charAt(peg$currPos))) {
                s9 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
              }
              if (s9 !== peg$FAILED) {
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  if (peg$c32.test(input.charAt(peg$currPos))) {
                    s9 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c33); }
                  }
                }
              } else {
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parse__();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseINLINE();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c34(s5);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseNEWLINE();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseNEWLINE();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c35(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }

    return s0;
  }

  function peg$parsearticle_group() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsearticle_group_title();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsearticle();
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$currPos;
        s6 = peg$parsearticle_group_title();
        if (s6 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s7 = peg$c37(s1, s6);
          if (s7) {
            s7 = void 0;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        peg$silentFails--;
        if (s5 !== peg$FAILED) {
          peg$currPos = s4;
          s4 = void 0;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsearticle_group();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c38(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsearticle();
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$currPos;
            s6 = peg$parsearticle_group_title();
            if (s6 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s7 = peg$c37(s1, s6);
              if (s7) {
                s7 = void 0;
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            peg$silentFails--;
            if (s5 !== peg$FAILED) {
              peg$currPos = s4;
              s4 = void 0;
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsearticle_group();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c38(s1, s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c39(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }

    return s0;
  }

  function peg$parsearticle_paragraph_caption() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseROUND_PARENTHESES_INLINE();
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNEWLINE();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          if (peg$c32.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          peg$silentFails--;
          if (s5 !== peg$FAILED) {
            peg$currPos = s4;
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c41(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }

    return s0;
  }

  function peg$parsearticle_title() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 31532) {
      s1 = peg$c24;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c43.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c43.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c44); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 26465) {
          s3 = peg$c45;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          if (peg$c30.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            if (peg$c32.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                if (peg$c32.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c33); }
                }
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }

    return s0;
  }

  function peg$parsearticle() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsearticle_paragraph_caption();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsearticle_title();
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecolumns_or_sentences();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c48(s1, s2, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c49(s1, s2);
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseNEWLINE();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseNEWLINE();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseINDENT();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseINDENT();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parselist();
                if (s9 !== peg$FAILED) {
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parselist();
                  }
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$parseNEWLINE();
                  while (s10 !== peg$FAILED) {
                    s9.push(s10);
                    s10 = peg$parseNEWLINE();
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseDEDENT();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseDEDENT();
                      if (s11 !== peg$FAILED) {
                        peg$savedPos = s5;
                        s6 = peg$c50(s1, s2, s3, s8);
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseINDENT();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseparagraph_item_child();
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$parseNEWLINE();
                  while (s10 !== peg$FAILED) {
                    s9.push(s10);
                    s10 = peg$parseNEWLINE();
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = [];
                    s11 = peg$currPos;
                    s12 = peg$parseparagraph_item_child();
                    if (s12 !== peg$FAILED) {
                      s13 = [];
                      s14 = peg$parseNEWLINE();
                      while (s14 !== peg$FAILED) {
                        s13.push(s14);
                        s14 = peg$parseNEWLINE();
                      }
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s11;
                        s12 = peg$c51(s1, s2, s3, s5, s8, s12);
                        s11 = s12;
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$currPos;
                      s12 = peg$parseparagraph_item_child();
                      if (s12 !== peg$FAILED) {
                        s13 = [];
                        s14 = peg$parseNEWLINE();
                        while (s14 !== peg$FAILED) {
                          s13.push(s14);
                          s14 = peg$parseNEWLINE();
                        }
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s11;
                          s12 = peg$c51(s1, s2, s3, s5, s8, s12);
                          s11 = s12;
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseDEDENT();
                      if (s11 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s7 = peg$c52(s1, s2, s3, s5, s8, s10);
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseparagraph_item();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseparagraph_item();
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parseINDENT();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseparagraph_item_child();
                    if (s10 !== peg$FAILED) {
                      s11 = [];
                      s12 = peg$parseNEWLINE();
                      while (s12 !== peg$FAILED) {
                        s11.push(s12);
                        s12 = peg$parseNEWLINE();
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = [];
                        s13 = peg$currPos;
                        s14 = peg$parseparagraph_item_child();
                        if (s14 !== peg$FAILED) {
                          s15 = [];
                          s16 = peg$parseNEWLINE();
                          while (s16 !== peg$FAILED) {
                            s15.push(s16);
                            s16 = peg$parseNEWLINE();
                          }
                          if (s15 !== peg$FAILED) {
                            peg$savedPos = s13;
                            s14 = peg$c53(s1, s2, s3, s5, s6, s7, s10, s14);
                            s13 = s14;
                          } else {
                            peg$currPos = s13;
                            s13 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s13;
                          s13 = peg$FAILED;
                        }
                        while (s13 !== peg$FAILED) {
                          s12.push(s13);
                          s13 = peg$currPos;
                          s14 = peg$parseparagraph_item_child();
                          if (s14 !== peg$FAILED) {
                            s15 = [];
                            s16 = peg$parseNEWLINE();
                            while (s16 !== peg$FAILED) {
                              s15.push(s16);
                              s16 = peg$parseNEWLINE();
                            }
                            if (s15 !== peg$FAILED) {
                              peg$savedPos = s13;
                              s14 = peg$c53(s1, s2, s3, s5, s6, s7, s10, s14);
                              s13 = s14;
                            } else {
                              peg$currPos = s13;
                              s13 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s13;
                            s13 = peg$FAILED;
                          }
                        }
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parseDEDENT();
                          if (s13 !== peg$FAILED) {
                            peg$savedPos = s8;
                            s9 = peg$c54(s1, s2, s3, s5, s6, s7, s10, s12);
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c55(s1, s2, s3, s5, s6, s7, s8);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c47); }
    }

    return s0;
  }

  function peg$parseparagraph_item() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsearticle_paragraph_caption();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parsearticle_title();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = peg$parseappdx_table_title();
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = void 0;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          peg$silentFails++;
          s7 = peg$parseappdx_style_title();
          peg$silentFails--;
          if (s7 === peg$FAILED) {
            s6 = void 0;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$currPos;
            peg$silentFails++;
            s8 = peg$parsesuppl_provision_label();
            peg$silentFails--;
            if (s8 === peg$FAILED) {
              s7 = void 0;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s8 = [];
              if (peg$c57.test(input.charAt(peg$currPos))) {
                s9 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c58); }
              }
              if (s9 !== peg$FAILED) {
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  if (peg$c57.test(input.charAt(peg$currPos))) {
                    s9 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c58); }
                  }
                }
              } else {
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7, s8];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsecolumns_or_sentences();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseNEWLINE();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseNEWLINE();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseINDENT();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseINDENT();
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$parselist();
                  if (s10 !== peg$FAILED) {
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parselist();
                    }
                  } else {
                    s9 = peg$FAILED;
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = [];
                    s11 = peg$parseNEWLINE();
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$parseNEWLINE();
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseDEDENT();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseDEDENT();
                        if (s12 !== peg$FAILED) {
                          peg$savedPos = s6;
                          s7 = peg$c59(s1, s2, s4, s9);
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseINDENT();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseparagraph_item_child();
                  if (s9 !== peg$FAILED) {
                    s10 = [];
                    s11 = peg$parseNEWLINE();
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$parseNEWLINE();
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = [];
                      s12 = peg$currPos;
                      s13 = peg$parseparagraph_item_child();
                      if (s13 !== peg$FAILED) {
                        s14 = [];
                        s15 = peg$parseNEWLINE();
                        while (s15 !== peg$FAILED) {
                          s14.push(s15);
                          s15 = peg$parseNEWLINE();
                        }
                        if (s14 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c60(s1, s2, s4, s6, s9, s13);
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      while (s12 !== peg$FAILED) {
                        s11.push(s12);
                        s12 = peg$currPos;
                        s13 = peg$parseparagraph_item_child();
                        if (s13 !== peg$FAILED) {
                          s14 = [];
                          s15 = peg$parseNEWLINE();
                          while (s15 !== peg$FAILED) {
                            s14.push(s15);
                            s15 = peg$parseNEWLINE();
                          }
                          if (s14 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c60(s1, s2, s4, s6, s9, s13);
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseDEDENT();
                        if (s12 !== peg$FAILED) {
                          peg$savedPos = s7;
                          s8 = peg$c61(s1, s2, s4, s6, s9, s11);
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c62(s1, s2, s4, s6, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }

    return s0;
  }

  function peg$parseno_name_paragraph_item() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecolumns_or_sentences();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseNEWLINE();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseNEWLINE();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseINDENT();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseINDENT();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parselist();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parselist();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parseNEWLINE();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseNEWLINE();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parseDEDENT();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseDEDENT();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c64(s1, s6);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseINDENT();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseparagraph_item_child();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parseNEWLINE();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseNEWLINE();
              }
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$currPos;
                s10 = peg$parseparagraph_item_child();
                if (s10 !== peg$FAILED) {
                  s11 = [];
                  s12 = peg$parseNEWLINE();
                  while (s12 !== peg$FAILED) {
                    s11.push(s12);
                    s12 = peg$parseNEWLINE();
                  }
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c65(s1, s3, s6, s10);
                    s9 = s10;
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$currPos;
                  s10 = peg$parseparagraph_item_child();
                  if (s10 !== peg$FAILED) {
                    s11 = [];
                    s12 = peg$parseNEWLINE();
                    while (s12 !== peg$FAILED) {
                      s11.push(s12);
                      s12 = peg$parseNEWLINE();
                    }
                    if (s11 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c65(s1, s3, s6, s10);
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseDEDENT();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s4;
                    s5 = peg$c66(s1, s3, s6, s8);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c67(s1, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c63); }
    }

    return s0;
  }

  function peg$parseparagraph_item_child() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsetable_struct();
    if (s0 === peg$FAILED) {
      s0 = peg$parseparagraph_item();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestyle_struct();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c68); }
    }

    return s0;
  }

  function peg$parselist() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecolumns_or_sentences();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseNEWLINE();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseNEWLINE();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$currPos;
        s6 = peg$c70;
        if (s6 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s7 = peg$c71(s1);
          if (s7) {
            s7 = void 0;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        peg$silentFails--;
        if (s5 !== peg$FAILED) {
          peg$currPos = s4;
          s4 = void 0;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseINDENT();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseINDENT();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parselist();
              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parselist();
                }
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parseNEWLINE();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parseNEWLINE();
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseDEDENT();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseDEDENT();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$currPos;
                      peg$silentFails++;
                      s12 = peg$currPos;
                      s13 = peg$c70;
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = peg$currPos;
                        s14 = peg$c72(s1, s7);
                        if (s14) {
                          s14 = void 0;
                        } else {
                          s14 = peg$FAILED;
                        }
                        if (s14 !== peg$FAILED) {
                          s13 = [s13, s14];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      peg$silentFails--;
                      if (s12 !== peg$FAILED) {
                        peg$currPos = s11;
                        s11 = void 0;
                      } else {
                        s11 = peg$FAILED;
                      }
                      if (s11 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s4 = peg$c73(s1, s7);
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$currPos;
          s6 = peg$c70;
          if (s6 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s7 = peg$c74(s1);
            if (s7) {
              s7 = void 0;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          peg$silentFails--;
          if (s5 !== peg$FAILED) {
            peg$currPos = s4;
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c75) {
              s5 = peg$c75;
              peg$currPos += 5;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c76); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c77(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }

    return s0;
  }

  function peg$parsetable_struct() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseINDENT();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseDEDENT();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseNEWLINE();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetable_struct_title();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseremarks();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseremarks();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetable();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseremarks();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseremarks();
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c79(s4, s5, s6, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c78); }
    }

    return s0;
  }

  function peg$parsetable_struct_title() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 20) === peg$c81) {
      s1 = peg$c81;
      peg$currPos += 20;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c82); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseINLINE();
        if (s4 !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos);
        } else {
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseNEWLINE();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c83(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c80); }
    }

    return s0;
  }

  function peg$parsetable() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 42) {
      s3 = peg$c85;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c86); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsetable_column();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c87) {
            s8 = peg$c87;
            peg$currPos += 2;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c88); }
          }
          if (s8 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 12288) {
              s8 = peg$c89;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c90); }
            }
            if (s8 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 9) {
                s8 = peg$c91;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c92); }
              }
            }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parsetable_column();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s7;
              s8 = peg$c93(s5, s9);
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c87) {
              s8 = peg$c87;
              peg$currPos += 2;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c88); }
            }
            if (s8 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 12288) {
                s8 = peg$c89;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c90); }
              }
              if (s8 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 9) {
                  s8 = peg$c91;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c92); }
                }
              }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parsetable_column();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s7;
                s8 = peg$c93(s5, s9);
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c94(s5, s6);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
          s3 = peg$c85;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c86); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetable_column();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c87) {
                s8 = peg$c87;
                peg$currPos += 2;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c88); }
              }
              if (s8 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 12288) {
                  s8 = peg$c89;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c90); }
                }
                if (s8 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 9) {
                    s8 = peg$c91;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c92); }
                  }
                }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsetable_column();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s7;
                  s8 = peg$c93(s5, s9);
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c87) {
                  s8 = peg$c87;
                  peg$currPos += 2;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c88); }
                }
                if (s8 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 12288) {
                    s8 = peg$c89;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c90); }
                  }
                  if (s8 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 9) {
                      s8 = peg$c91;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c92); }
                    }
                  }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetable_column();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s7;
                    s8 = peg$c93(s5, s9);
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c94(s5, s6);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c95(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c84); }
    }

    return s0;
  }

  function peg$parsetable_column() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c97;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c98); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s5 = peg$c99;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c100); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = [];
          if (peg$c101.test(input.charAt(peg$currPos))) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c102); }
          }
          if (s8 !== peg$FAILED) {
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              if (peg$c101.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c102); }
              }
            }
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s6 = input.substring(s6, peg$currPos);
          } else {
            s6 = s7;
          }
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c103) {
              s7 = peg$c103;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c104); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$currPos;
              s9 = [];
              if (peg$c105.test(input.charAt(peg$currPos))) {
                s10 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c106); }
              }
              if (s10 !== peg$FAILED) {
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  if (peg$c105.test(input.charAt(peg$currPos))) {
                    s10 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c106); }
                  }
                }
              } else {
                s9 = peg$FAILED;
              }
              if (s9 !== peg$FAILED) {
                s8 = input.substring(s8, peg$currPos);
              } else {
                s8 = s9;
              }
              if (s8 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c107) {
                  s9 = peg$c107;
                  peg$currPos += 2;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c108); }
                }
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s4;
                  s5 = peg$c109(s6, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s5 = peg$c99;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c100); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = [];
            if (peg$c101.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c102); }
            }
            if (s8 !== peg$FAILED) {
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                if (peg$c101.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c102); }
                }
              }
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s6 = input.substring(s6, peg$currPos);
            } else {
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c103) {
                s7 = peg$c103;
                peg$currPos += 2;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c104); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = [];
                if (peg$c105.test(input.charAt(peg$currPos))) {
                  s10 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c106); }
                }
                if (s10 !== peg$FAILED) {
                  while (s10 !== peg$FAILED) {
                    s9.push(s10);
                    if (peg$c105.test(input.charAt(peg$currPos))) {
                      s10 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c106); }
                    }
                  }
                } else {
                  s9 = peg$FAILED;
                }
                if (s9 !== peg$FAILED) {
                  s8 = input.substring(s8, peg$currPos);
                } else {
                  s8 = s9;
                }
                if (s8 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c107) {
                    s9 = peg$c107;
                    peg$currPos += 2;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c108); }
                  }
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s4;
                    s5 = peg$c109(s6, s8);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsefig_struct();
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$currPos;
            s6 = peg$parseINLINE();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s5 = input.substring(s5, peg$currPos);
            } else {
              s5 = s6;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseNEWLINE();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c110(s3, s5);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseINDENT();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseINDENT();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$currPos;
                s10 = peg$parsefig_struct();
                if (s10 === peg$FAILED) {
                  s10 = peg$currPos;
                  s11 = peg$currPos;
                  s12 = peg$parseINLINE();
                  if (s12 !== peg$FAILED) {
                    s11 = input.substring(s11, peg$currPos);
                  } else {
                    s11 = s12;
                  }
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parseNEWLINE();
                    if (s12 !== peg$FAILED) {
                      peg$savedPos = s10;
                      s11 = peg$c111(s3, s4, s11);
                      s10 = s11;
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                }
                if (s10 !== peg$FAILED) {
                  peg$savedPos = s9;
                  s10 = peg$c112(s3, s4, s10);
                }
                s9 = s10;
                if (s9 !== peg$FAILED) {
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$currPos;
                    s10 = peg$parsefig_struct();
                    if (s10 === peg$FAILED) {
                      s10 = peg$currPos;
                      s11 = peg$currPos;
                      s12 = peg$parseINLINE();
                      if (s12 !== peg$FAILED) {
                        s11 = input.substring(s11, peg$currPos);
                      } else {
                        s11 = s12;
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseNEWLINE();
                        if (s12 !== peg$FAILED) {
                          peg$savedPos = s10;
                          s11 = peg$c111(s3, s4, s11);
                          s10 = s11;
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    }
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c112(s3, s4, s10);
                    }
                    s9 = s10;
                  }
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$parseNEWLINE();
                  while (s10 !== peg$FAILED) {
                    s9.push(s10);
                    s10 = peg$parseNEWLINE();
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseDEDENT();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseDEDENT();
                      if (s11 !== peg$FAILED) {
                        peg$savedPos = s5;
                        s6 = peg$c113(s3, s4, s8);
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c114(s3, s4, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parseNEXTINLINE();
      if (s4 !== peg$FAILED) {
        s3 = input.substring(s3, peg$currPos);
      } else {
        s3 = s4;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s4 = peg$c115(s3);
        if (s4) {
          s4 = void 0;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      peg$silentFails--;
      if (s2 !== peg$FAILED) {
        peg$currPos = s1;
        s1 = void 0;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c97;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c98); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseNEWLINE();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c116();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c96); }
    }

    return s0;
  }

  function peg$parsestyle_struct() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseINDENT();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseDEDENT();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseNEWLINE();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestyle_struct_title();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseremarks();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseremarks();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsestyle();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseremarks();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseremarks();
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c118(s4, s5, s6, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c117); }
    }

    return s0;
  }

  function peg$parsestyle_struct_title() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 20) === peg$c120) {
      s1 = peg$c120;
      peg$currPos += 20;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c121); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseINLINE();
        if (s4 !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos);
        } else {
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseNEWLINE();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c122(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c119); }
    }

    return s0;
  }

  function peg$parsestyle() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsetable();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s1;
      s2 = peg$c124(s2);
    }
    s1 = s2;
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$parsefig();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c125(s2);
      }
      s1 = s2;
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseINDENT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseINDENT();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parselist();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parselist();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseNEWLINE();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseNEWLINE();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseDEDENT();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseDEDENT();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s1;
                    s2 = peg$c126(s4);
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c127(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c123); }
    }

    return s0;
  }

  function peg$parseremarks() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c129) {
      s3 = peg$c129;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c130); }
    }
    if (s3 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 27880) {
        s3 = peg$c131;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c132); }
      }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      if (peg$c32.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$c32.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parseINLINE();
        if (s5 !== peg$FAILED) {
          s4 = input.substring(s4, peg$currPos);
        } else {
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c133(s1, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNEWLINE();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseINDENT();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseINDENT();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$currPos;
              s9 = peg$currPos;
              peg$silentFails++;
              s10 = peg$currPos;
              s11 = peg$c70;
              if (s11 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s12 = peg$c134(s1, s2);
                if (s12) {
                  s12 = void 0;
                } else {
                  s12 = peg$FAILED;
                }
                if (s12 !== peg$FAILED) {
                  s11 = [s11, s12];
                  s10 = s11;
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              peg$silentFails--;
              if (s10 !== peg$FAILED) {
                peg$currPos = s9;
                s9 = void 0;
              } else {
                s9 = peg$FAILED;
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parseparagraph_item();
                if (s10 === peg$FAILED) {
                  s10 = peg$parseno_name_paragraph_item();
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$currPos;
                  peg$silentFails++;
                  s12 = peg$currPos;
                  s13 = peg$c70;
                  if (s13 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s14 = peg$c135(s1, s2, s10);
                    if (s14) {
                      s14 = void 0;
                    } else {
                      s14 = peg$FAILED;
                    }
                    if (s14 !== peg$FAILED) {
                      s13 = [s13, s14];
                      s12 = s13;
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                  peg$silentFails--;
                  if (s12 !== peg$FAILED) {
                    peg$currPos = s11;
                    s11 = void 0;
                  } else {
                    s11 = peg$FAILED;
                  }
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = s8;
                    s9 = peg$c136(s1, s2, s10);
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 === peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$currPos;
                peg$silentFails++;
                s10 = peg$currPos;
                s11 = peg$c70;
                if (s11 !== peg$FAILED) {
                  peg$savedPos = peg$currPos;
                  s12 = peg$c137(s1, s2);
                  if (s12) {
                    s12 = void 0;
                  } else {
                    s12 = peg$FAILED;
                  }
                  if (s12 !== peg$FAILED) {
                    s11 = [s11, s12];
                    s10 = s11;
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
                peg$silentFails--;
                if (s10 !== peg$FAILED) {
                  peg$currPos = s9;
                  s9 = void 0;
                } else {
                  s9 = peg$FAILED;
                }
                if (s9 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c75) {
                    s10 = peg$c75;
                    peg$currPos += 5;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c76); }
                  }
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$currPos;
                  s10 = peg$parseINLINE();
                  if (s10 !== peg$FAILED) {
                    s9 = input.substring(s9, peg$currPos);
                  } else {
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseNEWLINE();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s8;
                      s9 = peg$c138(s1, s2, s9);
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                }
              }
              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$currPos;
                  s9 = peg$currPos;
                  peg$silentFails++;
                  s10 = peg$currPos;
                  s11 = peg$c70;
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s12 = peg$c134(s1, s2);
                    if (s12) {
                      s12 = void 0;
                    } else {
                      s12 = peg$FAILED;
                    }
                    if (s12 !== peg$FAILED) {
                      s11 = [s11, s12];
                      s10 = s11;
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                  peg$silentFails--;
                  if (s10 !== peg$FAILED) {
                    peg$currPos = s9;
                    s9 = void 0;
                  } else {
                    s9 = peg$FAILED;
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseparagraph_item();
                    if (s10 === peg$FAILED) {
                      s10 = peg$parseno_name_paragraph_item();
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$currPos;
                      peg$silentFails++;
                      s12 = peg$currPos;
                      s13 = peg$c70;
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = peg$currPos;
                        s14 = peg$c135(s1, s2, s10);
                        if (s14) {
                          s14 = void 0;
                        } else {
                          s14 = peg$FAILED;
                        }
                        if (s14 !== peg$FAILED) {
                          s13 = [s13, s14];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      peg$silentFails--;
                      if (s12 !== peg$FAILED) {
                        peg$currPos = s11;
                        s11 = void 0;
                      } else {
                        s11 = peg$FAILED;
                      }
                      if (s11 !== peg$FAILED) {
                        peg$savedPos = s8;
                        s9 = peg$c136(s1, s2, s10);
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$currPos;
                    peg$silentFails++;
                    s10 = peg$currPos;
                    s11 = peg$c70;
                    if (s11 !== peg$FAILED) {
                      peg$savedPos = peg$currPos;
                      s12 = peg$c137(s1, s2);
                      if (s12) {
                        s12 = void 0;
                      } else {
                        s12 = peg$FAILED;
                      }
                      if (s12 !== peg$FAILED) {
                        s11 = [s11, s12];
                        s10 = s11;
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                    peg$silentFails--;
                    if (s10 !== peg$FAILED) {
                      peg$currPos = s9;
                      s9 = void 0;
                    } else {
                      s9 = peg$FAILED;
                    }
                    if (s9 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c75) {
                        s10 = peg$c75;
                        peg$currPos += 5;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c76); }
                      }
                      if (s10 !== peg$FAILED) {
                        s9 = [s9, s10];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$currPos;
                      s9 = peg$currPos;
                      s10 = peg$parseINLINE();
                      if (s10 !== peg$FAILED) {
                        s9 = input.substring(s9, peg$currPos);
                      } else {
                        s9 = s10;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseNEWLINE();
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s8;
                          s9 = peg$c138(s1, s2, s9);
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    }
                  }
                }
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parseNEWLINE();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parseNEWLINE();
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseDEDENT();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseDEDENT();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s4;
                      s5 = peg$c139(s1, s2, s7);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c140(s1, s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c128); }
    }

    return s0;
  }

  function peg$parsefig_struct() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsefig();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c142(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c141); }
    }

    return s0;
  }

  function peg$parsefig() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c144) {
      s1 = peg$c144;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c145); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c146) {
          s3 = peg$c146;
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c147); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c148) {
              s5 = peg$c148;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c149); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseINLINE();
                if (s8 !== peg$FAILED) {
                  s7 = input.substring(s7, peg$currPos);
                } else {
                  s7 = s8;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseNEWLINE();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c150(s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c143); }
    }

    return s0;
  }

  function peg$parseappdx_item() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseappdx_table();
    if (s0 === peg$FAILED) {
      s0 = peg$parseappdx_style();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesuppl_provision();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c151); }
    }

    return s0;
  }

  function peg$parseappdx_table_title() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c153) {
      s4 = peg$c153;
      peg$currPos += 2;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c154); }
    }
    if (s4 !== peg$FAILED) {
      s5 = [];
      if (peg$c155.test(input.charAt(peg$currPos))) {
        s6 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        if (peg$c155.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c156); }
        }
      }
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s2 = input.substring(s2, peg$currPos);
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseROUND_PARENTHESES_INLINE();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c157(s2, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = [];
        if (peg$c155.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c156); }
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          if (peg$c155.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c156); }
          }
        }
        if (s5 !== peg$FAILED) {
          s4 = input.substring(s4, peg$currPos);
        } else {
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c158(s2, s3, s4);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c159(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c152); }
    }

    return s0;
  }

  function peg$parseappdx_table() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseappdx_table_title();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseNEWLINE();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseNEWLINE();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseINDENT();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseappdx_table_children();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseremarks();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseremarks();
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parseNEWLINE();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseNEWLINE();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parseDEDENT();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c161(s1, s5, s6);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c162(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c160); }
    }

    return s0;
  }

  function peg$parseappdx_table_children() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsetable_struct();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c164(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = [];
      s1 = peg$parseparagraph_item();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseparagraph_item();
        }
      } else {
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c163); }
    }

    return s0;
  }

  function peg$parseappdx_style_title() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c166) {
      s4 = peg$c166;
      peg$currPos += 2;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c167); }
    }
    if (s4 !== peg$FAILED) {
      s5 = [];
      if (peg$c155.test(input.charAt(peg$currPos))) {
        s6 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        if (peg$c155.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c156); }
        }
      }
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s2 = input.substring(s2, peg$currPos);
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseROUND_PARENTHESES_INLINE();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c157(s2, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        if (peg$c155.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c156); }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (peg$c155.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c156); }
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c168(s2, s3, s4);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c159(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c165); }
    }

    return s0;
  }

  function peg$parseappdx_style() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseappdx_style_title();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseNEWLINE();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseNEWLINE();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseINDENT();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parsestyle_struct();
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$currPos;
            s9 = [];
            s10 = peg$parseNEWLINE();
            if (s10 !== peg$FAILED) {
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parseNEWLINE();
              }
            } else {
              s9 = peg$FAILED;
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parsestyle_struct();
              if (s10 !== peg$FAILED) {
                peg$savedPos = s8;
                s9 = peg$c170(s1, s6, s10);
                s8 = s9;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$currPos;
              s9 = [];
              s10 = peg$parseNEWLINE();
              if (s10 !== peg$FAILED) {
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = peg$parseNEWLINE();
                }
              } else {
                s9 = peg$FAILED;
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parsestyle_struct();
                if (s10 !== peg$FAILED) {
                  peg$savedPos = s8;
                  s9 = peg$c170(s1, s6, s10);
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c171(s1, s6, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseNEWLINE();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseNEWLINE();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseDEDENT();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c172(s1, s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c173(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c169); }
    }

    return s0;
  }

  function peg$parseappdx_style_children() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsetable_struct();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c164(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsefig();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c125(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = [];
        s1 = peg$parseparagraph_item();
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$parseparagraph_item();
          }
        } else {
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c174); }
    }

    return s0;
  }

  function peg$parsesuppl_provision_label() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      if (peg$c176.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 21063) {
            s6 = peg$c178;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c179); }
          }
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseROUND_PARENTHESES_INLINE();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c180(s2, s4);
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 25220) {
              s6 = peg$c181;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c182); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseNEWLINE();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseNEWLINE();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c183(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c175); }
    }

    return s0;
  }

  function peg$parsesuppl_provision() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsesuppl_provision_label();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsearticle();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsearticle();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = [];
        s3 = peg$parseparagraph_item();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseparagraph_item();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseno_name_paragraph_item();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseparagraph_item();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseparagraph_item();
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c185(s1, s3, s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c186(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c184); }
    }

    return s0;
  }

  function peg$parsecolumns_or_sentences() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$parsecolumns();
    if (s0 === peg$FAILED) {
      s0 = peg$parseperiod_sentences();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseINLINE();
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c188(s1);
        }
        s0 = s1;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c187); }
    }

    return s0;
  }

  function peg$parseperiod_sentences() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parsePERIOD_SENTENCE_FRAGMENT();
    if (s3 !== peg$FAILED) {
      s2 = input.substring(s2, peg$currPos);
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsePERIOD_SENTENCE_FRAGMENT();
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c190(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c189); }
    }

    return s0;
  }

  function peg$parsecolumns() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseperiod_sentences();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseperiod_sentences();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c192(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseperiod_sentences();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c192(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c193(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c191); }
    }

    return s0;
  }

  function peg$parseINLINE() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseINDENT();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseDEDENT();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c195.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c196); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c195.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c196); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c194); }
    }

    return s0;
  }

  function peg$parseNEXTINLINE() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseINDENT();
    if (s2 === peg$FAILED) {
      s2 = peg$parseDEDENT();
      if (s2 === peg$FAILED) {
        if (peg$c198.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c199); }
        }
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseINDENT();
      if (s2 === peg$FAILED) {
        s2 = peg$parseDEDENT();
        if (s2 === peg$FAILED) {
          if (peg$c198.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c199); }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseINLINE();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c200(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c197); }
    }

    return s0;
  }

  function peg$parseNOT_PARENTHESIS_CHAR() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c202.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c203); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c201); }
    }

    return s0;
  }

  function peg$parseINLINE_FRAGMENT() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseINDENT();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseDEDENT();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c205.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c206); }
        }
        if (s4 === peg$FAILED) {
          s4 = peg$parsePARENTHESES_INLINE();
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c205.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c206); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$parsePARENTHESES_INLINE();
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c204); }
    }

    return s0;
  }

  function peg$parsePERIOD_SENTENCE_FRAGMENT() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseINDENT();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseDEDENT();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 13) === peg$c208) {
          s6 = peg$c208;
          peg$currPos += 13;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c209); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = void 0;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (peg$c210.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c211); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$parsePARENTHESES_INLINE();
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 13) === peg$c208) {
              s6 = peg$c208;
              peg$currPos += 13;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c209); }
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = void 0;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              if (peg$c210.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c211); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$parsePARENTHESES_INLINE();
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 12290) {
            s4 = peg$c212;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c213); }
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parse__();
            peg$silentFails--;
            if (s5 !== peg$FAILED) {
              peg$currPos = s4;
              s4 = void 0;
            } else {
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parseNEWLINE();
              peg$silentFails--;
              if (s5 !== peg$FAILED) {
                peg$currPos = s4;
                s4 = void 0;
              } else {
                s4 = peg$FAILED;
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 12290) {
        s0 = peg$c212;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c213); }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c207); }
    }

    return s0;
  }

  function peg$parseOUTSIDE_PARENTHESES_INLINE() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseINDENT();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseDEDENT();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseNOT_PARENTHESIS_CHAR();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseNOT_PARENTHESIS_CHAR();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c214); }
    }

    return s0;
  }

  function peg$parsePARENTHESES_INLINE() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseROUND_PARENTHESES_INLINE();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSQUARE_BRACKETS_INLINE();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCURLY_BRACKETS_INLINE();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSQUARE_PARENTHESES_INLINE();
          if (s0 === peg$FAILED) {
            s0 = peg$parsequote_struct();
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c215); }
    }

    return s0;
  }

  function peg$parseROUND_PARENTHESES_INLINE() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c217.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c218); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseNOT_PARENTHESIS_CHAR();
      if (s4 === peg$FAILED) {
        s4 = peg$parsePARENTHESES_INLINE();
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseNOT_PARENTHESIS_CHAR();
        if (s4 === peg$FAILED) {
          s4 = peg$parsePARENTHESES_INLINE();
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (peg$c219.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c220); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c221(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c216); }
    }

    return s0;
  }

  function peg$parseSQUARE_BRACKETS_INLINE() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c223.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c224); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseNOT_PARENTHESIS_CHAR();
      if (s4 === peg$FAILED) {
        s4 = peg$parsePARENTHESES_INLINE();
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseNOT_PARENTHESIS_CHAR();
        if (s4 === peg$FAILED) {
          s4 = peg$parsePARENTHESES_INLINE();
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (peg$c225.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c226); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c221(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c222); }
    }

    return s0;
  }

  function peg$parseCURLY_BRACKETS_INLINE() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c228.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c229); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseNOT_PARENTHESIS_CHAR();
      if (s4 === peg$FAILED) {
        s4 = peg$parsePARENTHESES_INLINE();
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseNOT_PARENTHESIS_CHAR();
        if (s4 === peg$FAILED) {
          s4 = peg$parsePARENTHESES_INLINE();
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (peg$c230.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c231); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c221(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c227); }
    }

    return s0;
  }

  function peg$parseSQUARE_PARENTHESES_INLINE() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c233.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c234); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      if (peg$c235.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c236); }
      }
      if (s4 === peg$FAILED) {
        s4 = peg$parseSQUARE_PARENTHESES_INLINE();
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$c235.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c236); }
        }
        if (s4 === peg$FAILED) {
          s4 = peg$parseSQUARE_PARENTHESES_INLINE();
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (peg$c237.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c238); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c221(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c232); }
    }

    return s0;
  }

  function peg$parsequote_struct() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13) === peg$c208) {
      s1 = peg$c208;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c209); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 14) === peg$c240) {
        s6 = peg$c240;
        peg$currPos += 14;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c241); }
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = void 0;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c0); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 14) === peg$c240) {
          s6 = peg$c240;
          peg$currPos += 14;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c241); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = void 0;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c0); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 14) === peg$c240) {
          s3 = peg$c240;
          peg$currPos += 14;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c241); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c221(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c239); }
    }

    return s0;
  }

  function peg$parseINDENT() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13) === peg$c243) {
      s1 = peg$c243;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c244); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c245.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c246); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c245.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c246); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c247) {
          s3 = peg$c247;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c248); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c249(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c242); }
    }

    return s0;
  }

  function peg$parseDEDENT() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 8) === peg$c251) {
      s0 = peg$c251;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c252); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c250); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    if (peg$c253.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c254); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c253.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c253.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c254); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c253.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c255); }
    }

    return s0;
  }

  function peg$parseNEWLINE() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c257.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c258); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      if (peg$c259.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c260); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parseNEWLINE();
          peg$silentFails--;
          if (s6 !== peg$FAILED) {
            peg$currPos = s5;
            s5 = void 0;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c256); }
    }

    return s0;
  }


      class EL {

          constructor(tag, attr, children) {
              // if(!tag) {
              //     error(`${JSON.stringify(tag)} is invalid tag.`);
              // }
              this.tag= tag;
              this.attr= attr || {};
              this.children= children || [];
          }

          append(child) {
              if(child !== undefined && child !== null) {
                  // if(!(child instanceof EL) && !(child instanceof String)) {
                  //     error("child is not EL or String.");
                  // }
                  this.children.push(child);
              }
              return this;
          }

          extend(children) {
              // if(!Array.isArray(children)) {
              //     error(`${JSON.stringify(children).slice(0,100)} is not Array.`);
              // }
              // for(let i = 0; i < children.length; i++) {
              //     let child = children[i];
              //     if(!(child instanceof EL) && !(child instanceof String)) {
              //         error("child is not EL or String.");
              //     }
              // }
              this.children = this.children.concat(children);
              return this;
          }

      }



      let indent_memo = options.indent_memo;



      let indent_depth = 0;

      let base_indent_stack = [];

      let paragraph_item_tags = {
          0: 'Paragraph', 1: 'Item',
          2: 'Subitem1',  3: 'Subitem2',  4: 'Subitem3',
          5: 'Subitem4',  6: 'Subitem5',  7: 'Subitem6',
          8: 'Subitem7',  9: 'Subitem8', 10: 'Subitem9',
          11: 'Subitem10',
      };
      let paragraph_item_title_tags = {
          0: 'ParagraphNum',  1: 'ItemTitle',
          2: 'Subitem1Title', 3: 'Subitem2Title', 4: 'Subitem3Title',
          5: 'Subitem4Title', 6: 'Subitem5Title', 7: 'Subitem6Title',
          8: 'Subitem7Title', 9: 'Subitem8Title', 10: 'Subitem9Title',
          11: 'Subitem10Title',
      };
      let paragraph_item_sentence_tags = {
          0: 'ParagraphSentence',  1: 'ItemSentence',
          2: 'Subitem1Sentence', 3: 'Subitem2Sentence', 4: 'Subitem3Sentence',
          5: 'Subitem4Sentence', 6: 'Subitem5Sentence', 7: 'Subitem6Sentence',
          8: 'Subitem7Sentence', 9: 'Subitem8Sentence', 10: 'Subitem9Sentence',
          11: 'Subitem10Sentence',
      };




      let list_depth = 0;

      let list_tags = {
          0: 'List', 1: 'Sublist1', 2: 'Sublist2',  3: 'Sublist3',
      };





      let article_group_type_chars = "編章節款目";

      let article_group_type = {
          '編': 'Part', '章': 'Chapter', '節': 'Section',
          '款': 'Subsection', '目': 'Division',
          '条': 'Article', '則': 'SupplProvision',
      };

      let article_group_title_tag = {
          '編': 'PartTitle', '章': 'ChapterTitle', '節': 'SectionTitle',
          '款': 'SubsectionTitle', '目': 'DivisionTitle', '条': 'ArticleTitle',
          '則': 'SupplProvisionLabel'
      };

      let re_kanji_num = /((\S*)千)?((\S*)百)?((\S*)十)?(\S*)/;

      function parse_kanji_num(text) {
          let m = text.match(re_kanji_num)
          if(m) {
              let d1000 = m[1] ? kanji_digits[m[2]] || 1 : 0;
              let d100 = m[3] ? kanji_digits[m[4]] || 1 : 0;
              let d10 = m[5] ? kanji_digits[m[6]] || 1 : 0;
              let d1 = kanji_digits[m[7]] || 0;
              return "" + (d1000 * 1000 + d100 * 100 + d10 * 10 + d1);
          }
          return null;
      }

      function get_lawtype(text) {
          if(text.match(/^法律/)) return "Act";
          else if(text.match(/^政令/)) return "CabinetOrder";
          else if(text.match(/^勅令/)) return "ImperialOrder";
          else if(text.match(/^^\S*[^政勅]令/)) return "MinisterialOrdinance";
          else if(text.match(/^\S*規則/)) return "Rule";
          else return null;
      }

      let kanji_digits = {
          '〇': 0, '一': 1, '二': 2, '三': 3, '四': 4,
          '五': 5, '六': 6, '七': 7, '八': 8, '九': 9,
      };

      let eras = {
          '明治': 'Meiji', '大正': 'Taisho',
          '昭和': 'Showa', '平成': 'Heisei',
      };

      let re_named_num = /^(○?)第?([一二三四五六七八九十百千]+)\S*?([のノ一二三四五六七八九十百千]*)$/;
      let iroha_chars = "イロハニホヘトチリヌルヲワカヨタレソツネナラムウヰノオクヤマケフコエテアサキユメミシヱヒモセスン";
      let re_iroha_char = /[イロハニホヘトチリヌルヲワカヨタレソツネナラムウヰノオクヤマケフコエテアサキユメミシヱヒモセスン]/;
      let re_item_num = /^\D*(\d+)\D*$/;

      function parse_roman_num(text) {
          let num = 0;
          for(let i = 0; i < text.length; i++) {
              let char = text[i];
              let next_char = text[i + 1] || "";
              if(char.match(/[iIｉＩ]/)) {
                  if (next_char.match(/[xXｘＸ]/)) num -= 1;
                  else num += 1;
              }
              if(char.match(/[xXｘＸ]/)) {
                  num += 10;
              }
          }
          return num;
      }

      let re_wide_digits = [
          [/０/g, '0'], [/１/g, '1'], [/２/g, '2'], [/３/g, '3'], [/４/g, '4'],
          [/５/g, '5'], [/６/g, '6'], [/７/g, '7'], [/８/g, '8'], [/９/g, '9'],
      ];

      function replace_wide_num(text) {
          let ret = text;

          for(let i = 0; i < re_wide_digits.length; i++) {
              let [re_wide, narrow]  = re_wide_digits[i];
              ret = ret.replace(re_wide, narrow);
          }
          return ret;
      }

      function parse_named_num(text) {
          let nums_group = [];

          let subtexts = text
              .split(/\s+/)[0]
              .replace("及び", "、")
              .replace("から", "、")
              .replace("まで", "")
              .replace("～", "、")
              .replace("・", "、")
              .split("、");

          for(let i = 0; i < subtexts.length; i++) {
              let subtext = subtexts[i];

              let m = subtext.match(re_named_num);
              if(m) {
                  let nums = [parse_kanji_num(m[2])];
                  if(m[3]) {
                      let bs = m[3].split(/のノ/g);
                      for(let j = 0; j < bs.length; j++) {
                          if(!bs[j]) continue;
                          nums.push(parse_kanji_num(bs[j]));
                      }
                  }
                  nums_group.push(nums.join('_'));
                  continue;
              }

              m = subtext.match(re_iroha_char);
              if(m) {
                  nums_group.push(iroha_chars.indexOf(m[0]) + 1);
                  continue;
              }

              subtext = replace_wide_num(subtext);
              m = subtext.match(re_item_num);
              if(m) {
                  nums_group.push(m[1]);
                  continue;
              }

              let roman_num = parse_roman_num(subtext);
              if(roman_num !== 0) {
                  nums_group.push(roman_num);
              }
          }

          return nums_group.join(':');
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};

},{}],4:[function(require,module,exports){

},{}],5:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[2]);
